{
  "category": "football_engine",
  "sections": [
    {
      "title": "Starting Project",
      "chats": [
        {
          "indexTitle": "Repository",
          "question": "Repository",
          "answer": "---\n* [Repository Link](https://github.com/atari-monk/football_engine.git)\n* Created with github account\n* Cloned using git bash cli app, with git bash here menu\n```bash\ngit clone https://github.com/atari-monk/football_engine.git\n```",
          "dateTime": "2024-06-27T13:19:04.055Z"
        },
        {
          "indexTitle": "Chatgpt",
          "question": "Chatgpt",
          "answer": "* Note on usage\n* I Like short question, take note if answear is usefull, and delete it\n* If need be to input code i like to say wait for n files and question after",
          "dateTime": "2024-06-27T10:20:02.857Z"
        },
        {
          "indexTitle": "Install Node.js",
          "question": "Install Node.js  \nHow to install node.js on windows ?",
          "answer": "Installing Node.js on Windows is straightforward. Here’s a step-by-step guide to help you get started:\n\n### Step 1: Download Node.js Installer\n\n1. **Visit the Node.js official website:** Go to [nodejs.org](https://nodejs.org/).\n   \n2. **Download the installer:** Click on the \"Recommended For Most Users\" button to download the Windows Installer (.msi).\n\n### Step 2: Run the Installer\n\n1. **Run the downloaded installer (.msi):** Once the download is complete, double-click the downloaded file to launch the installer.\n\n2. **Accept the User Account Control prompt:** If prompted by User Account Control, click \"Yes\" to allow the installer to make changes to your device.\n\n3. **Choose installation options:**\n   - You can leave the default settings or customize the installation by clicking on \"Customize\".\n   - It's recommended to leave the default options unless you have a specific reason to change them.\n\n4. **Install:** Click on the \"Next\" button, then click \"Install\" to start the installation.\n\n### Step 3: Verify Installation\n\n1. **Check Node.js version:** Once the installation is complete, you can verify it by opening a Command Prompt (cmd.exe) or PowerShell and typing:\n   ```bash\n   node -v\n   ```\n   This command should print the version of Node.js installed (e.g., `v16.4.0`).\n\n2. **Check npm (Node Package Manager) version:** Additionally, you can check the version of npm (which comes bundled with Node.js) by typing:\n   ```bash\n   npm -v\n   ```\n   This command should print the version of npm installed.\n\n### Step 4: Update npm (optional)\n\nNode.js often comes with a bundled version of npm, but you can update it to the latest stable version using npm itself:\n   \n```bash\nnpm install -g npm@latest\n```\n\nThis command updates npm globally to the latest version.\n\n### Step 5: Start Using Node.js\n\nNow that Node.js is installed, you can start using it to run JavaScript applications, build servers, and more on your Windows machine.\n\n### Additional Notes:\n\n- **Environment Variables:** During installation, Node.js should automatically add itself to your PATH environment variable, which allows you to run `node` and `npm` commands from any command prompt.\n\n- **Troubleshooting:** If you encounter any issues during installation or with running Node.js after installation, checking the Node.js documentation or community forums for troubleshooting tips can be helpful.\n\nBy following these steps, you should have Node.js installed and ready to use on your Windows system.",
          "dateTime": "2024-06-27T10:07:27.105Z"
        },
        {
          "indexTitle": "Structure",
          "question": "Structure  \nI need it for client and server, and also i kind of need libs",
          "answer": "---\nFor a TypeScript project that involves both client-side and server-side code, along with using libraries (libs), you'll need a structure that accommodates these different aspects efficiently. Here's a comprehensive approach to structuring your project:\n\n### Project Structure\n\n```\nmy-project/\n├── client/\n│   ├── src/\n│   │   ├── index.tsx (or .tsx for React, .ts for plain TypeScript)\n│   │   ├── components/\n│   │   │   ├── Component1.tsx\n│   │   │   └── Component2.tsx\n│   │   └── styles/\n│   │       └── styles.css (or .scss, .less as needed)\n│   ├── public/\n│   │   ├── index.html\n│   │   └── assets/\n│   └── tsconfig.json (client specific TypeScript configuration)\n│\n├── server/\n│   ├── src/\n│   │   ├── index.ts (or .js if running directly in Node.js)\n│   │   ├── routes/\n│   │   │   ├── apiRoutes.ts\n│   │   │   └── webRoutes.ts\n│   │   └── controllers/\n│   │       ├── ApiController.ts\n│   │       └── WebController.ts\n│   ├── tsconfig.json (server specific TypeScript configuration)\n│   └── package.json (Node.js specific dependencies)\n│\n├── shared/\n│   ├── src/\n│   │   ├── models/\n│   │   │   ├── UserModel.ts\n│   │   │   └── ProductModel.ts\n│   │   ├── utils/\n│   │   │   └── helperFunctions.ts\n│   │   └── constants/\n│   │       └── constants.ts\n│   └── tsconfig.json (shared TypeScript configuration)\n│\n├── libs/\n│   ├── lib1/\n│   │   ├── src/\n│   │   └── tsconfig.json (library specific TypeScript configuration)\n│   ├── lib2/\n│   │   ├── src/\n│   │   └── tsconfig.json (library specific TypeScript configuration)\n│   └── ...\n│\n├── dist/ (or build/ for output of client and server builds)\n│\n├── package.json (root level dependencies and scripts)\n└── README.md\n```\n\n### Explanation:\n\n1. **Client**: Contains all client-side code, typically using a framework like React or just plain JavaScript/TypeScript with HTML/CSS.\n\n2. **Server**: Contains server-side code, often using Node.js with Express or another backend framework. Separation of routes and controllers is common for maintainability.\n\n3. **Shared**: Contains code that is shared between client and server. This might include data models, utility functions, constants, etc. Each subfolder (`models`, `utils`, `constants`) organizes different types of shared functionality.\n\n4. **Libs**: Each folder under `libs/` represents a separate library or external dependency you are using. Each library may have its own TypeScript configuration (`tsconfig.json`) and source code (`src/`).\n\n5. **Dist/Build**: This is where the compiled/transpiled JavaScript files for both client and server applications will be outputted after building.\n\n6. **Configuration Files**:\n   - Each major section (`client`, `server`, `shared`, `libs`) has its own `tsconfig.json` to specify TypeScript settings specific to that section.\n\n### Tips:\n\n- **Dependency Management**: Manage dependencies separately for client (frontend) and server (backend) using `package.json` files under respective directories (`client/package.json`, `server/package.json`).\n\n- **Build Scripts**: Define build scripts (`build`, `start`, etc.) in the root `package.json` that trigger builds for both client and server simultaneously if needed.\n\n- **Testing and Linting**: Set up testing and linting configurations specific to client and server as needed, ensuring both environments are covered.\n\n- **Continuous Integration**: Configure CI/CD pipelines to automate testing, building, and deployment processes for both client and server.\n\nBy structuring your project in this manner, you can efficiently manage client-side, server-side, shared code, and external libraries while leveraging TypeScript's strong typing and modern JavaScript features across the board. Adjust the specifics (like folder names, configuration details) based on your project's needs and preferences.",
          "dateTime": "2024-06-27T13:38:12.168Z"
        },
        {
          "indexTitle": "Setup Project",
          "question": "Setup Project  \nCan u give me some script that will setup this project for me ?",
          "answer": "Setting up a TypeScript project with client-side (frontend), server-side (backend), shared code, and libraries involves several steps. Below is a script that outlines how you can set up a basic structure and configuration for such a project. This script assumes you are using Node.js and npm for managing dependencies and scripts.\n\n### Prerequisites:\n- Node.js and npm installed globally.\n\n### Steps:\n\n1. **Create Project Directory and Navigate to It:**\n\n   ```bash\n   mkdir my-project\n   cd my-project\n   ```\n\n2. **Initialize npm in the Project Root:**\n\n   ```bash\n   npm init -y\n   ```\n\n3. **Install TypeScript as a Development Dependency:**\n\n   ```bash\n   npm install typescript --save-dev\n   ```\n\n4. **Create Initial Project Structure:**\n\n   ```bash\n   mkdir client server shared libs dist\n   ```\n\n5. **Set Up TypeScript Configuration Files:**\n\n   - **Client (`client/tsconfig.json`):**\n     ```json\n     {\n       \"compilerOptions\": {\n         \"target\": \"es5\",\n         \"module\": \"commonjs\",\n         \"jsx\": \"react\",\n         \"strict\": true,\n         \"esModuleInterop\": true,\n         \"skipLibCheck\": true,\n         \"forceConsistentCasingInFileNames\": true,\n         \"moduleResolution\": \"node\",\n         \"resolveJsonModule\": true,\n         \"baseUrl\": \"./src\",\n         \"paths\": {\n           \"*\": [\"src/*\"]\n         }\n       },\n       \"include\": [\"src/**/*.tsx\", \"src/**/*.ts\"]\n     }\n     ```\n\n   - **Server (`server/tsconfig.json`):**\n     ```json\n     {\n       \"compilerOptions\": {\n         \"target\": \"es2017\",\n         \"module\": \"commonjs\",\n         \"strict\": true,\n         \"esModuleInterop\": true,\n         \"skipLibCheck\": true,\n         \"forceConsistentCasingInFileNames\": true,\n         \"moduleResolution\": \"node\",\n         \"resolveJsonModule\": true,\n         \"baseUrl\": \"./src\",\n         \"paths\": {\n           \"*\": [\"src/*\"]\n         }\n       },\n       \"include\": [\"src/**/*.ts\"]\n     }\n     ```\n\n   - **Shared (`shared/tsconfig.json`):**\n     ```json\n     {\n       \"compilerOptions\": {\n         \"target\": \"es5\",\n         \"module\": \"commonjs\",\n         \"strict\": true,\n         \"esModuleInterop\": true,\n         \"skipLibCheck\": true,\n         \"forceConsistentCasingInFileNames\": true,\n         \"moduleResolution\": \"node\",\n         \"resolveJsonModule\": true,\n         \"baseUrl\": \"./src\",\n         \"paths\": {\n           \"*\": [\"src/*\"]\n         }\n       },\n       \"include\": [\"src/**/*.ts\"]\n     }\n     ```\n\n   - **Example Library (`libs/my-library/tsconfig.json`):**\n     ```json\n     {\n       \"compilerOptions\": {\n         \"target\": \"es5\",\n         \"module\": \"commonjs\",\n         \"strict\": true,\n         \"esModuleInterop\": true,\n         \"skipLibCheck\": true,\n         \"forceConsistentCasingInFileNames\": true,\n         \"moduleResolution\": \"node\",\n         \"resolveJsonModule\": true,\n         \"baseUrl\": \"./src\",\n         \"paths\": {\n           \"*\": [\"src/*\"]\n         }\n       },\n       \"include\": [\"src/**/*.ts\"]\n     }\n     ```\n\n6. **Create Initial Files and Folders Within `src/` Directories:**\n\n   - For `client/src/`, `server/src/`, `shared/src/`, and any library under `libs/`, create initial TypeScript files and directories based on your project's structure.\n\n7. **Add Basic npm Scripts to `package.json`:**\n\n   ```json\n   {\n     \"scripts\": {\n       \"build:client\": \"tsc --project client\",\n       \"build:server\": \"tsc --project server\",\n       \"build:shared\": \"tsc --project shared\",\n       \"build:libs\": \"tsc --build libs/**/tsconfig.json\",\n       \"build\": \"npm-run-all build:*\",\n       \"start:client\": \"node dist/client/index.js\",\n       \"start:server\": \"node dist/server/index.js\",\n       \"start\": \"concurrently \\\"npm run start:client\\\" \\\"npm run start:server\\\"\",\n       \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n     }\n   }\n   ```\n\n   - Adjust these scripts as per your specific requirements (e.g., adding testing with Jest/Mocha, linting, etc.).\n\n8. **Install Additional Dependencies:**\n\n   - For frontend frameworks/libraries (React, Angular, etc.), server-side frameworks (Express, Koa, etc.), and any other dependencies needed for your project.\n\n9. **Build and Run:**\n\n   - After setting up the basic structure, you can run `npm run build` to compile TypeScript files into JavaScript (`dist/` folder) and then `npm start` to start your client and server applications simultaneously (assuming you have `concurrently` or another tool installed for running multiple npm scripts concurrently).\n\n### Notes:\n\n- Customize the TypeScript configurations (`tsconfig.json`) based on your project's specific needs, such as target ECMAScript version, module settings, and paths.\n- Organize your source code (`src/` directories) into logical modules/components according to your application's architecture.\n- Manage dependencies (`npm install`) for client, server, and any libraries separately as required by your project.\n\nThis script provides a foundational setup for a TypeScript project with client-server architecture, shared code, and external libraries, allowing you to expand and customize it further based on your application's complexity and requirements.",
          "dateTime": "2024-06-27T10:04:18.324Z"
        },
        {
          "indexTitle": "Setup Project 2",
          "question": "Setup Project 2  \nNew version of ts in configs",
          "answer": "To ensure your project is set up with the newest version of TypeScript and its configuration files (`tsconfig.json`) are updated accordingly, you can follow these steps. This setup assumes the use of the latest TypeScript features and configurations.\n\n### Prerequisites:\n- Node.js and npm installed globally.\n\n### Steps:\n\n1. **Create Project Directory and Navigate to It:**\n\n   ```bash\n   mkdir my-project\n   cd my-project\n   ```\n\n2. **Initialize npm in the Project Root:**\n\n   ```bash\n   npm init -y\n   ```\n\n3. **Install TypeScript as a Development Dependency:**\n\n   ```bash\n   npm install typescript --save-dev\n   ```\n\n4. **Create Initial Project Structure:**\n\n   ```bash\n   mkdir client server shared libs dist\n   ```\n\n5. **Set Up TypeScript Configuration Files:**\n\n   - **Root `tsconfig.json`** (optional but recommended for centralized configuration):\n\n     ```json\n     {\n       \"compilerOptions\": {\n         \"target\": \"ES2022\",\n         \"module\": \"commonjs\",\n         \"strict\": true,\n         \"esModuleInterop\": true,\n         \"skipLibCheck\": true,\n         \"forceConsistentCasingInFileNames\": true,\n         \"moduleResolution\": \"node\",\n         \"resolveJsonModule\": true,\n         \"baseUrl\": \".\",\n         \"paths\": {\n           \"*\": [\"node_modules/*\"]\n         },\n         \"outDir\": \"./dist\"\n       },\n       \"include\": [],\n       \"exclude\": [\"node_modules\", \"dist\"]\n     }\n     ```\n\n   - **Client (`client/tsconfig.json`):**\n     ```json\n     {\n       \"extends\": \"../tsconfig.json\",\n       \"compilerOptions\": {\n         \"target\": \"ES2022\",\n         \"jsx\": \"react\"\n       },\n       \"include\": [\"src/**/*.tsx\", \"src/**/*.ts\"]\n     }\n     ```\n\n   - **Server (`server/tsconfig.json`):**\n     ```json\n     {\n       \"extends\": \"../tsconfig.json\",\n       \"compilerOptions\": {\n         \"target\": \"ES2022\"\n       },\n       \"include\": [\"src/**/*.ts\"]\n     }\n     ```\n\n   - **Shared (`shared/tsconfig.json`):**\n     ```json\n     {\n       \"extends\": \"../tsconfig.json\",\n       \"compilerOptions\": {\n         \"target\": \"ES2022\"\n       },\n       \"include\": [\"src/**/*.ts\"]\n     }\n     ```\n\n   - **Example Library (`libs/my-library/tsconfig.json`):**\n     ```json\n     {\n       \"extends\": \"../../tsconfig.json\",\n       \"compilerOptions\": {\n         \"target\": \"ES2022\"\n       },\n       \"include\": [\"src/**/*.ts\"]\n     }\n     ```\n\n6. **Create Initial Files and Folders Within `src/` Directories:**\n\n   - For `client/src/`, `server/src/`, `shared/src/`, and any library under `libs/`, create initial TypeScript files and directories based on your project's structure.\n\n7. **Add Basic npm Scripts to `package.json`:**\n\n   ```json\n   {\n     \"scripts\": {\n       \"build:client\": \"tsc --project client\",\n       \"build:server\": \"tsc --project server\",\n       \"build:shared\": \"tsc --project shared\",\n       \"build:libs\": \"tsc --build libs/**/tsconfig.json\",\n       \"build\": \"npm-run-all build:*\",\n       \"start:client\": \"node dist/client/index.js\",\n       \"start:server\": \"node dist/server/index.js\",\n       \"start\": \"concurrently \\\"npm run start:client\\\" \\\"npm run start:server\\\"\",\n       \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n     }\n   }\n   ```\n\n   - Adjust these scripts as per your specific requirements (e.g., adding testing with Jest/Mocha, linting, etc.).\n\n8. **Install Additional Dependencies:**\n\n   - For frontend frameworks/libraries (React, Angular, etc.), server-side frameworks (Express, Koa, etc.), and any other dependencies needed for your project.\n\n9. **Build and Run:**\n\n   - After setting up the basic structure, you can run `npm run build` to compile TypeScript files into JavaScript (`dist/` folder) and then `npm start` to start your client and server applications simultaneously (assuming you have `concurrently` or another tool installed for running multiple npm scripts concurrently).\n\n### Notes:\n\n- Customize the TypeScript configurations (`tsconfig.json`) based on your project's specific needs, such as target ECMAScript version, module settings, and paths.\n- Organize your source code (`src/` directories) into logical modules/components according to your application's architecture.\n- Manage dependencies (`npm install`) for client, server, and any libraries separately as required by your project.\n\nThis setup ensures that you are using the latest TypeScript version and features, while maintaining a clean and modular project structure.",
          "dateTime": "2024-06-27T14:07:36.312Z"
        },
        {
          "indexTitle": "Setup Project 3",
          "question": "Setup Project 3  \nTests and linter",
          "answer": "For a test project setup using TypeScript, you can follow the similar steps but tailor the configuration to suit a testing environment. Here’s how you can set up a TypeScript project optimized for testing:\n\n### Prerequisites:\n- Node.js and npm installed globally.\n\n### Steps:\n\n1. **Create Project Directory and Navigate to It:**\n\n   ```bash\n   mkdir test-project\n   cd test-project\n   ```\n\n2. **Initialize npm in the Project Root:**\n\n   ```bash\n   npm init -y\n   ```\n\n3. **Install TypeScript and Testing Libraries as Development Dependencies:**\n\n   ```bash\n   npm install typescript --save-dev\n   npm install jest @types/jest ts-jest --save-dev\n   ```\n\n4. **Create Initial Project Structure:**\n\n   ```bash\n   mkdir src tests dist\n   ```\n\n5. **Set Up TypeScript Configuration Files:**\n\n   - **Root `tsconfig.json`:**\n\n     ```json\n     {\n       \"compilerOptions\": {\n         \"target\": \"ES2022\",\n         \"module\": \"commonjs\",\n         \"strict\": true,\n         \"esModuleInterop\": true,\n         \"skipLibCheck\": true,\n         \"forceConsistentCasingInFileNames\": true,\n         \"moduleResolution\": \"node\",\n         \"resolveJsonModule\": true,\n         \"baseUrl\": \".\",\n         \"paths\": {\n           \"*\": [\"node_modules/*\"]\n         },\n         \"outDir\": \"./dist\"\n       },\n       \"include\": [\"src\", \"tests\"],\n       \"exclude\": [\"node_modules\", \"dist\"]\n     }\n     ```\n\n6. **Set Up Jest Configuration:**\n\n   - **Create `jest.config.js`:**\n\n     ```javascript\n     module.exports = {\n       preset: 'ts-jest',\n       testEnvironment: 'node',\n       testMatch: ['**/tests/**/*.test.ts'],\n     };\n     ```\n\n7. **Create Initial Files and Folders Within `src/` and `tests/` Directories:**\n\n   - **src/index.ts:**\n\n     ```typescript\n     export const sum = (a: number, b: number): number => {\n       return a + b;\n     };\n     ```\n\n   - **tests/index.test.ts:**\n\n     ```typescript\n     import { sum } from '../src/index';\n\n     test('adds 1 + 2 to equal 3', () => {\n       expect(sum(1, 2)).toBe(3);\n     });\n     ```\n\n8. **Add Basic npm Scripts to `package.json`:**\n\n   ```json\n   {\n     \"scripts\": {\n       \"build\": \"tsc\",\n       \"test\": \"jest\",\n       \"start\": \"node dist/index.js\"\n     }\n   }\n   ```\n\n9. **Build and Run Tests:**\n\n   - Run `npm run build` to compile the TypeScript files into JavaScript (`dist/` folder).\n   - Run `npm test` to execute the tests using Jest.\n\n### Additional Configuration for Testing\n\nTo enhance the testing environment, consider the following additional configurations:\n\n- **Jest Watch Mode:** Add `\"test:watch\": \"jest --watch\"` to your `package.json` scripts for continuous test running.\n- **Coverage Reporting:** Add `\"jest --coverage\"` in the `test` script for generating code coverage reports.\n- **Linting:** Install ESLint and a TypeScript plugin for linting:\n\n  ```bash\n  npm install eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin --save-dev\n  ```\n\n  - **Create `.eslintrc.js`:**\n\n    ```javascript\n    module.exports = {\n      parser: '@typescript-eslint/parser',\n      parserOptions: {\n        ecmaVersion: 2020,\n        sourceType: 'module',\n      },\n      extends: [\n        'plugin:@typescript-eslint/recommended',\n      ],\n      rules: {\n        // Add your custom rules here\n      },\n    };\n    ```\n\n  - **Add Linting Script to `package.json`:**\n\n    ```json\n    {\n      \"scripts\": {\n        \"lint\": \"eslint . --ext .ts\"\n      }\n    }\n    ```\n\n### Summary\n\nThis setup provides a basic structure for a TypeScript project with Jest for testing. The `tsconfig.json` ensures the TypeScript compiler is configured correctly, while the Jest configuration allows for running and writing tests in TypeScript. You can further customize the setup by adding more dependencies and configurations as needed for your specific project requirements.",
          "dateTime": "2024-06-27T14:12:42.240Z"
        },
        {
          "indexTitle": "'npm-run-all'",
          "question": "'npm-run-all' is not recognized as an internal or external command,\noperable program or batch file.",
          "answer": "---\nThe error message you're encountering indicates that the `npm-run-all` command is not recognized by your system. This usually happens when the `npm-run-all` package is not installed or not added to your system's PATH. Here are the steps to resolve this issue:\n\n1. **Install `npm-run-all` Globally:**\n   First, ensure that `npm-run-all` is installed globally so that it's accessible from any directory.\n\n   ```bash\n   npm install -g npm-run-all\n   ```\n\n2. **Install `npm-run-all` Locally:**\n   Alternatively, you can install `npm-run-all` locally within your project and use it in your scripts.\n\n   ```bash\n   npm install --save-dev npm-run-all\n   ```\n\n3. **Check Installation:**\n   Verify that `npm-run-all` is installed correctly. You can do this by running:\n\n   ```bash\n   npm list -g --depth=0\n   ```\n\n   Look for `npm-run-all` in the output. If it's listed, the installation was successful.\n\n4. **Using `npx`:**\n   If you don't want to install `npm-run-all` globally, you can use `npx` to run the command without installing it globally.\n\n   ```bash\n   npx npm-run-all\n   ```\n\n5. **Ensure PATH is Set Correctly:**\n   Make sure that your global `npm` directory is in your system's PATH. You can add it to your PATH environment variable. The location of the global `npm` directory varies depending on your operating system.\n\n   For Windows:\n   - Open the Environment Variables settings.\n   - Find the `Path` variable under \"System variables\" and edit it.\n   - Add the path to your global `npm` directory, typically `C:\\Users\\<YourUsername>\\AppData\\Roaming\\npm`.\n\n   For macOS/Linux:\n   - Open your shell profile file (e.g., `~/.bashrc`, `~/.zshrc`).\n   - Add the following line:\n\n     ```sh\n     export PATH=$PATH:$(npm config get prefix)/bin\n     ```\n\n   - Save the file and run `source ~/.bashrc` or `source ~/.zshrc`.\n\n6. **Verify Node.js and npm Installation:**\n   Ensure that Node.js and npm are installed correctly. You can check their versions using the following commands:\n\n   ```bash\n   node -v\n   npm -v\n   ```\n\nAfter following these steps, try running `npm-run-all` again. If the problem persists, please provide more details about your environment (OS, Node.js version, npm version) and any relevant parts of your `package.json` file.",
          "dateTime": "2024-06-27T14:23:18.079Z"
        },
        {
          "indexTitle": "build libs error",
          "question": "\"build:libs\": \"tsc --build libs/**/tsconfig.json\"\nhad to be replaced",
          "answer": "mkdir script  \nbuild-libs.js  \n**Alternative Approach (without `glob`)**:\n   If `glob` continues to cause issues, you can consider using `fs.readdirSync` to manually list files in the `libs` directory and filter them based on `tsconfig.json`:\n\n   ```javascript\n   const fs = require('fs');\n   const path = require('path');\n   const { exec } = require('child_process');\n\n   const directoryPath = 'libs';\n\n   fs.readdirSync(directoryPath).forEach(file => {\n     const filePath = path.join(directoryPath, file);\n     if (fs.statSync(filePath).isDirectory()) {\n       const tsConfigPath = path.join(filePath, 'tsconfig.json');\n       if (fs.existsSync(tsConfigPath)) {\n         exec(`tsc --build ${tsConfigPath}`, (err, stdout, stderr) => {\n           if (err) {\n             console.error(`Error building ${tsConfigPath}:`, stderr);\n             process.exit(1);\n           } else {\n             console.log(`Successfully built ${tsConfigPath}`);\n             console.log(stdout);\n           }\n         });\n       }\n     }\n   });\n   ```\n\n   This script iterates over the `libs` directory, checks each subdirectory for a `tsconfig.json` file, and then runs `tsc --build` for each found `tsconfig.json`.\n",
          "dateTime": "2024-06-27T14:46:16.272Z"
        },
        {
          "indexTitle": "Setup Project Execution",
          "question": "Setup Project Execution  \nWhat i did difrent from Setup Project notes",
          "answer": "* build folder insted dist\n* .gitignore\n```plaintext\nbuild\nnode_modules\n```\n* there must be empty index.js files in source for initial build\n* after repair of build errors, used 'npm test' to pass sample test\n* .npmrc\n```\nloglevel=warn\n```\n* add clean build script\n```\n\"clean\": \"rd /s /q build\"\n```\n* .prettierrc\n```json\n{\n  \"singleQuote\": true,\n  \"indent\": 2,\n  \"semi\": false\n}\n```",
          "dateTime": "2024-06-27T21:39:24.135Z"
        },
        {
          "indexTitle": "Import problem in libs",
          "question": "Import problem in libs",
          "answer": "* i have libs/engine_api, libs/engine\n* problem was with importing in engine from engine_api\n* to root tsconfig add\n```json\n\"paths\": {\n      \"engine_api\": [\"libs/engine_api/src\"],\n      \"engine\": [\"libs/engine/src\"]\n    },\n```\n* path is alias, allows to use name instead of full path\n* references\n```json\n\"references\": [{ \"path\": \"./libs/engine_api\" }, { \"path\": \"./libs/engine\" }]\n```\n* these inform compiler that projects are related and have order of build\n* this goes in engine tscode\n```json\n\"references\": [{ \"path\": \"../engine_api\" }]\n```\n* use import this way\n```\nimport { IConfig } from 'engine_api'\n```\n* Enabling \"composite\": true in both engine_api and engine ensures that TypeScript can efficiently manage dependencies, perform accurate type checking across projects, and optimize build times through incremental compilation. This setup is particularly beneficial in complex projects or monorepos where projects depend on each other's types and functionality.\n```json\n\"composite\": true,\n```",
          "dateTime": "2024-06-27T21:32:04.322Z"
        },
        {
          "indexTitle": "Test",
          "question": "Test",
          "answer": "```bash\nmkdir test\n```\n```bash\nmkdir src\n```\n```bash\nmkdir tests\n```\n* install\n```json\nnpm i @types/jest jest ts-jest\n```\n* index.ts\n```typescript\nexport const sum = (a: number, b: number): number => {\n    return a + b;\n};\n```\n* index.test.ts\n```typescript\nimport { sum } from \"./../index\";\n\ntest(\"adds 1 + 2 to equal 3\", () => {\n    expect(sum(1, 2)).toBe(3);\n});\n```\n* jest.config.js in root\n```javascript\nmodule.exports = {\n    preset: \"ts-jest\",\n    testEnvironment: \"node\",\n    testMatch: [\"**/tests/**/*.test.ts\"],\n};\n```\n* add to root package.json script\n```json\n\"test\": \"jest\",\n```",
          "dateTime": "2024-06-27T21:46:35.235Z"
        }
      ]
    },
    {
      "title": "Feature Scene",
      "chats": [
        {
          "indexTitle": "Definition",
          "question": "Definition",
          "answer": "* entity data in json with feature\n* by feature i mean minimal component and system build to provide some functionality\n* this is a test and documentation in form of working scene",
          "dateTime": "2024-06-27T12:32:27.824Z"
        }
      ]
    }
  ]
}