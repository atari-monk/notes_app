{
  "category": "code",
  "sections": [
    {
      "title": "Note",
      "chats": [
        {
          "indexTitle": "Source",
          "question": "Source",
          "answer": "[Math for Game Devs [2022]](https://www.youtube.com/watch?v=fjOdtSu4Lm4&list=PLImQaTpSAdsArRFFj8bIfqMk2X7Vlf3XF)",
          "dateTime": "2024-04-29T19:29:52.695Z"
        },
        {
          "indexTitle": "Radial Trigger",
          "question": "Radial Trigger",
          "answer": "- In Unity\n- Add Trigger to Hierarchy\n- Add object\n- Add script to Trigger named RadialTrigger\n```csharp\npublic class RiadialTrigger : MonoBehaviour {\n\n  public float radius = 1;\n  public Transform player;\n\n  void OnDrawGizmos() {\n    Vector3 center = transform.position;\n    if( player == null )\n      return;\n    Vector3 playerPos = player.position;\n    float dist = Vector3.Distance( center, playerPos );\n\tbool inside = dist <= radius;\n\tGizmos.color = inside ? Color.white : Color.red;\n\tGizmos.DrawWireSphere( center, radius);\n  }\n}\n```\n- Set player referance in editor and radius value\n- This will work but there are common points to make\n```csharp\nVector3 delta = center - playerPos;\nfloat dist = Mathf.Sqrt ( delta.x * delta.x + delta.y * delta.y + delta.z * delta.z );\n```\n- It's better to use 1., more performant\n- second option is for floating point exponents, more expensive math\n```csharp\n//1. \ndelta.x * delta.x\n//2.\nMathf.Pow( delta.x, 2 );\nMathf.Pow( delta.x, 2.5f ); \n```\n- More important point is that Sqrt is most expensive operation here so use squered length instead\n```csharp\nfloat sqrDist = delta.x * delta.x + delta.y * delta.y + delta.z * delta.z;\nbool inside = sqrDist <= radius*radius;\n```\n- These are equal but second option is dimension independent and works for 2d and 3d alike, witch we may want\n```csharp\nfloat sqrDist = delta.x * delta.x + delta.y * delta.y + delta.z * delta.z;\nfloat sqrDist = Vector3.Dot( delta, delta );\n```\n- Optimized\n```csharp\npublic class RadialTrigger : MonoBehaviour {\n\n    public float radius = 1;\n    public Transform player;\n    private float sqrRadius;\n    private Vector3 center;\n\n    void Start() {\n        if (!IsPlayerValid()) {\n            Debug.LogWarning(\"Player reference is not set.\");\n        }\n        sqrRadius = radius * radius;\n        center = transform.position;\n    }\n\n    void OnDrawGizmos() {\n        Vector3 delta = center - player.position;\n        float sqrDist = delta.sqrMagnitude;\n        bool inside = sqrDist <= sqrRadius;\n        Gizmos.color = inside ? Color.white : Color.red;\n        Gizmos.DrawWireSphere(center, radius);\n    }\n\n    bool IsPlayerValid() {\n        return player != null;\n    }\n}\n```",
          "dateTime": "2024-04-29T20:31:15.601Z"
        }
      ]
    },
    {
      "title": "Transformation Matrices",
      "chats": [
        {
          "indexTitle": "Matrices",
          "question": "Matrices",
          "answer": "- Way of storing points\n- Column matrix\n```plaintext\n|x|\n|y|\n|z|\n```\n- Row matrix\n```plaintext\n|x y z|\n```",
          "dateTime": "2024-05-19T15:28:16.412Z"
        },
        {
          "indexTitle": "Multiplication",
          "question": "Multiplication",
          "answer": "- a x b\n```plaintext\n                |bx|\n[ax ay az] |by|\n                |bz|\n```\n- Multiplication rule is\n```plaintext\n[bx by bz]      \n[ax ay az]  = bx*ax + by*ay + bz*az\n```\n* It's Dot Product\n* [Visualisation](http://matrixmultiplication.xyz/)",
          "dateTime": "2024-05-19T16:18:09.249Z"
        }
      ]
    },
    {
      "title": "Scalar Projection",
      "chats": [
        {
          "indexTitle": "Definition",
          "question": "Definition",
          "answer": "- timestamp in video\n   * 2:24:30\n- definition\n   * normalized vector a dot product with vector b\n- interpretation\n   * length of b projected on direction a\n- use case\n   * distance of object a to b\n      - take direction a moves\n      - take ab vector\n      - calculate their scalar projection to get distance\n- both a and b normalized give angle betwen them ?",
          "dateTime": "2024-06-10T18:39:19.324Z"
        }
      ]
    }
  ]
}